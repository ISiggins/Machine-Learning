import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
# Data Preprocessing

train_datagen = ImageDataGenerator(
        rescale=1./255,# this will apply feature scaling
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

training_set= train_datagen.flow_from_directory(
        'Desktop/Covid19-dataset/train',
        target_size=(64,64),
        batch_size=32,
        class_mode='binary')
        
#Preprocessing the Test Set
test_datagen = ImageDataGenerator(rescale=1./255)
test_set = test_datagen.flow_from_directory(
        'Desktop/Covid19-dataset/test',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

# Building the CNN
cnn = tf.keras.models.Sequential()
# adds the convolution layer 1
cnn.add(tf.keras.layers.Conv2D(filters=32, 
                               kernel_size=(3,3), 
                               activation = 'relu', 
                               input_shape=[64,64,3]))
                               
# adds the MAX pooling layer
cnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))

# adds the second convolution layer
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size= (3,3), activation = 'relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))

# adds the third convolution layer
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size= (3,3), activation = 'relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size = 2, strides = 2))

# adds Flattening , makes it in to a one-demenisional layer
cnn.add(tf.keras.layers.Flatten())

# full Connection of the network
cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

# add the final output layer
cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

cnn.summary()

#Train the CNN
# compile the CNN
cnn.compile(optimizer='adam',
            loss='binary_crossentropy',
            metrics=['accuracy'])
            
# train the training set and evaluate it on the test set
history= cnn.fit(x= training_set, validation_data= test_set, epochs=15) 
cnn.evaluate(test_set)
            



